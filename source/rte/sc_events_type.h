
/*
 * Filename: sc_events_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SC_EVENTS_TYPE
#define _H_DEFINE_SC_EVENTS_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_EVENTS_INCLUDES */

/* USER CODE END SC_EVENTS_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_EVENTS signal    
 **********************************************************************/

/* USER CODE START SC_EVENTS_USERDEFINITIONS */
typedef enum 
{    
  
  EV_NONE,
  EV_KEYLEFT,
  EV_KEYRIGHT,
  EV_KEYRIGHTLONGPRESS,
  EV_250MS,
  EV_1MIN
    
} EVENT_enum_t;

/* USER CODE END SC_EVENTS_USERDEFINITIONS */

typedef 
/* USER CODE START SC_EVENTS_SIGNALDATADEFINITION */
struct
{
	EVENT_enum_t m_ev;
} 
/* USER CODE END SC_EVENTS_SIGNALDATADEFINITION */
SC_EVENTS_data_t;

/* USER CODE START InitSC_EVENTS */

#define SC_EVENTS_INIT_DATA ((SC_EVENTS_data_t){EV_NONE})
/* USER CODE END InitSC_EVENTS */


/**
 * Default IN driver API
 * \param SC_EVENTS_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_EVENTS_driverIn(SC_EVENTS_data_t *const data);



/**
 * Default OUT driver API
 * \param const SC_EVENTS_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_EVENTS_driverOut(const SC_EVENTS_data_t  *const data);


/* USER CODE START SC_EVENTS_USERFUNCTIONS */

/* USER CODE END SC_EVENTS_USERFUNCTIONS */


#endif